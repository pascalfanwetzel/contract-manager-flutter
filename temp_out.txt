import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';

import '../domain/models.dart';
import '../data/app_state.dart';
import 'widgets.dart';
import 'category_actions.dart';
import '../../../app/routes.dart' as r;
import '../../../core/auth/auth_service.dart';
import '../../../core/cloud/snapshot_service.dart';

class ContractsPage extends StatefulWidget {
  final AppState state;
  final String? initialCategoryId;
  const ContractsPage({super.key, required this.state, this.initialCategoryId});

  @override
  State<ContractsPage> createState() => _ContractsPageState();
}

class _ContractsPageState extends State<ContractsPage> {
  final _q = TextEditingController();
  String? _selectedCategoryId; // null == All
  String? _editingCategoryId;
  bool _bootSyncTriggered = false;

  @override
  void initState() {
    super.initState();
    // Preselect category if provided via navigation
    _selectedCategoryId = widget.initialCategoryId;
    // Ensure fresh data after first unlock/sign-in when entering Contracts
    WidgetsBinding.instance.addPostFrameCallback((_) async {
      await _kickFirstSyncIfNeeded();
    });
  }

  @override
  void dispose() {
    _q.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: widget.state,
      builder: (context, _) {
        // Safety: if user enabled cloud and has DEK but hasn't completed a sync
        // yet, trigger a one-shot sync+rehydrate to avoid showing stale data.
        // This is a no-op after the first successful run.
        if (!_bootSyncTriggered) {
          // Fire and forget; internal guard prevents multiple executions
          _kickFirstSyncIfNeeded();
        }
        if (widget.state.isLoading) {
          return Scaffold(
            appBar: AppBar(
              title: const Text('Contracts'),
              actions: [
                IconButton(
                  tooltip: 'Manage categories',
                  icon: const Icon(Icons.tune),
                  onPressed: null,
                ),
              ],
            ),
            body: const Center(child: CircularProgressIndicator()),
          );
        }
        final categories = [...widget.state.categories];
        if (_selectedCategoryId != null &&
            !categories.any((c) => c.id == _selectedCategoryId)) {
          _selectedCategoryId = null;
        }
        final all = widget.state.contracts;

        final query = _q.text.trim().toLowerCase();
        final filtered = all.where((c) {
          final matchQ = query.isEmpty ||
              c.title.toLowerCase().contains(query) ||
              c.provider.toLowerCase().contains(query);
          final matchCat =
              _selectedCategoryId == null || c.categoryId == _selectedCategoryId;
          return matchQ && matchCat;
        }).toList();


        // Modern UI redesign using slivers
        return Scaffold(
          floatingActionButton: FloatingActionButton.extended(
            onPressed: _showAddSheet,
            icon: const Icon(Icons.add),
            label: const Text('Add contract'),
          ),
          body: RefreshIndicator(
            onRefresh: () => widget.state.syncNow(),
            child: GestureDetector(
              behavior: HitTestBehavior.opaque,
              onTapDown: (_) => setState(() => _editingCategoryId = null),
              child: CustomScrollView(
                slivers: [
                  SliverAppBar.large(
                    pinned: true,
                    title: const Text('Contracts'),
                    actions: [
                      if (widget.state.cloudSyncEnabled)
                        Padding(
                          padding: const EdgeInsets.only(right: 8.0, top: 12),
                          child: _syncStatusTag(context, widget.state),
                        ),
                    ],
                  ),
                  SliverPersistentHeader(
                    pinned: true,
                    delegate: _StickyHeaderDelegate(
                      height: 64,
                      child: Container(
                        color: Theme.of(context).colorScheme.surface,
                        padding: const EdgeInsets.fromLTRB(16, 8, 16, 8),
                        child: SearchBar(
                          controller: _q,
                          hintText: 'Search contracts…',
                          leading: const Icon(Icons.search),
                          onChanged: (_) => setState(() {}),
                        ),
                      ),
                    ),
                  ),
                  SliverPersistentHeader(
                    pinned: true,
                    delegate: _StickyHeaderDelegate(
                      height: 64,
                      child: Container(
                        color: Theme.of(context).colorScheme.surface,
                        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                        child: SingleChildScrollView(
                          scrollDirection: Axis.horizontal,
                          clipBehavior: Clip.none,
                          child: Row(
                            crossAxisAlignment: CrossAxisAlignment.center,
                            children: [
                              FilterChip(
                                label: const Text('All'),
                                selected: _selectedCategoryId == null,
                                onSelected: (_) => setState(() {
                                  _selectedCategoryId = null;
                                  _editingCategoryId = null;
                                }),
                              ),
                              const SizedBox(width: 8),
                              SizedBox(
                                height: 40,
                                child: ReorderableListView.builder(
                                  key: const PageStorageKey('categories_reorderable'),
                                  scrollDirection: Axis.horizontal,
                                  shrinkWrap: true,
                                  physics: const NeverScrollableScrollPhysics(),
                                  buildDefaultDragHandles: false,
                                  onReorderStart: (index) {
                                    setState(() => _editingCategoryId = categories[index].id);
                                  },
                                  onReorder: (oldIndex, newIndex) {
                                    if (newIndex > oldIndex) newIndex -= 1;
                                    if (newIndex == oldIndex) return;
                                    final dragged = categories[oldIndex];
                                    final lastIndex = categories.length - 1;
                                    final lastIsOther = categories.isNotEmpty && categories[lastIndex].id == 'cat_other';
                                    if (dragged.id == 'cat_other') return;
                                    if (lastIsOther && newIndex >= lastIndex) {
                                      newIndex = (lastIndex - 1).clamp(0, lastIndex);
                                    }
                                    widget.state.reorderCategory(dragged.id, newIndex);
                                    setState(() { _editingCategoryId = null; });
                                  },
                                  itemCount: categories.length,
                                  itemBuilder: (ctx, index) {
                                    final cat = categories[index];
                                    return Padding(
                                      key: ValueKey(cat.id),
                                      padding: const EdgeInsets.only(right: 8),
                                      child: ReorderableDelayedDragStartListener(
                                        index: index,
                                        child: CategoryChip(
                                          category: cat,
                                          selected: _selectedCategoryId == cat.id,
                                          editing: _editingCategoryId == cat.id,
                                          onSelected: () => setState(() {
                                            _selectedCategoryId = cat.id;
                                            _editingCategoryId = null;
                                          }),
                                          onDelete: () async {
                                            await deleteCategoryWithFallbackFlow(
                                              context,
                                              state: widget.state,
                                              category: cat,
                                              onDone: (fallbackId, moved) {
                                                if (_selectedCategoryId == cat.id) {
                                                  _selectedCategoryId = fallbackId;
                                                }
                                                setState(() => _editingCategoryId = null);
                                              },
                                            );
                                          },
                                          onRename: () async {
                                            await renameCategoryFlow(
                                              context,
                                              state: widget.state,
                                              category: cat,
                                            );
                                            setState(() => _editingCategoryId = null);
                                          },
                                        ),
                                      ),
                                    );
                                  },
                                ),
                              ),
                              const SizedBox(width: 8),
                              ActionChip(
                                avatar: const Icon(Icons.add),
                                label: const Text('New category'),
                                onPressed: () async {
                                  final id = await newCategoryFlow(context, state: widget.state);
                                  if (id != null) setState(() => _selectedCategoryId = id);
                                  setState(() => _editingCategoryId = null);
                                },
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ),
                  if (filtered.isEmpty)
                    const SliverFillRemaining(
                      hasScrollBody: false,
                      child: Center(child: Text('No contracts')),
                    )
                  else
                    SliverPadding(
                      padding: const EdgeInsets.fromLTRB(12, 8, 12, 80),
                      sliver: SliverList.separated(
                        itemBuilder: (_, i) {
                          final c = filtered[i];
                          final cat = widget.state.categoryById(c.categoryId)!;
                          return ContractTile(
                            contract: c,
                            category: cat,
                            onDetails: () async {
                              await context.push(
                                r.AppRoutes.contractDetails(c.id),
                              );
                            },
                          );
                        },
                        separatorBuilder: (_, __) => const SizedBox(height: 8),
                        itemCount: filtered.length,
                      ),
                    ),
                ],
              ),
            ),
          ),
        );




        return Scaffold(
          appBar: AppBar(
            title: Row(
              children: [
                const Expanded(child: Text('Contracts')),
                if (widget.state.cloudSyncEnabled) _syncStatusTag(context, widget.state),
              ],
            ),
          ),
          body: GestureDetector(
            behavior: HitTestBehavior.opaque,
            onTapDown: (_) => setState(() => _editingCategoryId = null),
            child: Padding(
              padding: const EdgeInsets.all(12),
              child: Column(
                children: [
                // Removed extra syncing banner; the tag and pull-to-refresh spinner are sufficient
                Row(
                  children: [
                    Expanded(
                      child: TextField(
                        controller: _q,
                        onChanged: (_) => setState(() {}),
                        decoration: const InputDecoration(
                          hintText: 'Search contractsâ€¦',
                          prefixIcon: Icon(Icons.search),
                        ),
                      ),
                    ),
                    const SizedBox(width: 8),
                    FilledButton.icon(
                      onPressed: () async {
                        // Capture before async gap
                        final messenger = ScaffoldMessenger.of(context);
                        final newC = await context.push<Contract>(r.AppRoutes.contractNew);
                        if (!context.mounted) return;
                        if (newC != null) {
                          final ok = await widget.state.tryAddContract(newC);
                          if (!context.mounted) return;
                          messenger.showSnackBar(
                            SnackBar(
                              content: Text(ok ? 'Contract saved' : 'Failed to save contract'),
                              behavior: SnackBarBehavior.floating,
                              duration: const Duration(seconds: 2),
                            ),
                          );
                        }
                      },
                      icon: const Icon(Icons.add),
                      label: const Text('Add'),
                    ),
                  ],
                ),
                const SizedBox(height: 12),

                // Category chips + New category
                SingleChildScrollView(
                  clipBehavior: Clip.none,
                  scrollDirection: Axis.horizontal,
                  child: Row(
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: [
                      FilterChip(
                        label: const Text('All'),
                        selected: _selectedCategoryId == null,
                        onSelected: (_) => setState(() {
                          _selectedCategoryId = null;
                          _editingCategoryId = null;
                        }),
                      ),
                      const SizedBox(width: 8),
                      // Reorderable list of category chips (horizontal),
                      // non-scrollable so the outer SingleChildScrollView handles scrolling.
                      SizedBox(
                        height: 40,
                        child: ReorderableListView.builder(
                          key: const PageStorageKey('categories_reorderable'),
                          scrollDirection: Axis.horizontal,
                          shrinkWrap: true,
                          physics: const NeverScrollableScrollPhysics(),
                          buildDefaultDragHandles: false,
                          proxyDecorator: (child, index, animation) => Material(
                            color: Colors.transparent,
                            child: FadeTransition(opacity: animation, child: child),
                          ),
                          onReorderStart: (index) {
                            setState(() => _editingCategoryId = categories[index].id);
                          },
                          onReorder: (oldIndex, newIndex) {
                            // Adjust newIndex when moving forward
                            if (newIndex > oldIndex) newIndex -= 1;
                            if (newIndex == oldIndex) return;
                            final dragged = categories[oldIndex];
                            // Pin 'Other' at the end; do not allow dragging it
                            final lastIndex = categories.length - 1;
                            final lastIsOther = categories.isNotEmpty && categories[lastIndex].id == 'cat_other';
                            if (dragged.id == 'cat_other') return;
                            if (lastIsOther && newIndex >= lastIndex) {
                              newIndex = (lastIndex - 1).clamp(0, lastIndex);
                            }
                            widget.state.reorderCategory(dragged.id, newIndex);
                            setState(() { _editingCategoryId = null; });
                          },
                          itemCount: categories.length,
                          itemBuilder: (ctx, index) {
                            final cat = categories[index];
                            return Padding(
                              key: ValueKey(cat.id),
                              padding: const EdgeInsets.only(right: 8),
                              child: ReorderableDelayedDragStartListener(
                                index: index,
                                child: CategoryChip(
                                  category: cat,
                                  selected: _selectedCategoryId == cat.id,
                                  editing: _editingCategoryId == cat.id,
                                  onSelected: () => setState(() {
                                    _selectedCategoryId = cat.id;
                                    _editingCategoryId = null;
                                  }),
                                  onDelete: () async {
                                    await deleteCategoryWithFallbackFlow(
                                      context,
                                      state: widget.state,
                                      category: cat,
                                      onDone: (fallbackId, moved) {
                                        if (_selectedCategoryId == cat.id) {
                                          _selectedCategoryId = fallbackId;
                                        }
                                        setState(() => _editingCategoryId = null);
                                      },
                                    );
                                  },
                                  onRename: () async {
                                    await renameCategoryFlow(
                                      context,
                                      state: widget.state,
                                      category: cat,
                                    );
                                    setState(() => _editingCategoryId = null);
                                  },
                                ),
                              ),
                            );
                          },
                        ),
                      ),
                      const SizedBox(width: 8),
                      ActionChip(
                        avatar: const Icon(Icons.add),
                        label: const Text('New category'),
                        onPressed: () async {
                          final id = await newCategoryFlow(context, state: widget.state);
                          if (id != null) setState(() => _selectedCategoryId = id);
                          setState(() => _editingCategoryId = null);
                        },
                      ),
                    ],
                  ),
                ),

                const SizedBox(height: 12),

                Expanded(
                  child: filtered.isEmpty
                      ? const Center(child: Text('No contracts'))
                      : RefreshIndicator(
                          onRefresh: () => widget.state.syncNow(),
                          child: ListView.separated(
                            itemCount: filtered.length,
                            separatorBuilder: (context, _) =>
                                const SizedBox(height: 8),
                          itemBuilder: (_, i) {
                            final c = filtered[i];
                            final cat =
                                widget.state.categoryById(c.categoryId)!;
                            return ContractTile(
                              contract: c,
                              category: cat,
                              onDetails: () async {
                                await context.push(
                                  r.AppRoutes.contractDetails(c.id),
                                );
                                // state is a ChangeNotifier; UI will rebuild via AnimatedBuilder
                              },
                            );
                          },
                        ),
                        ),
                ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  Future<void> _kickFirstSyncIfNeeded() async {
    if (_bootSyncTriggered) return;
    final s = widget.state;
    final signedIn = AuthService.instance.currentUser != null;
    if (!signedIn) { _bootSyncTriggered = true; return; }
    if (!s.cloudSyncEnabled || !s.hasCloudDek) { _bootSyncTriggered = true; return; }
    if (s.lastSyncTs != null) { _bootSyncTriggered = true; return; }
    _bootSyncTriggered = true; // set early to avoid double-kick
    s.beginFreshCloudHydrate();
    try { await SnapshotService.instance.hydrateFromLatestSnapshotIfFresh(); } catch (_) {}
    try { await s.syncNow(); } catch (_) {}
    try { await s.rehydrateAll(); } catch (_) {}
  }

  // Sync status tag: constant label 'Sync'; blue when healthy/syncing, gray otherwise
  Widget _syncStatusTag(BuildContext context, AppState state) {
    const baseText = 'Sync';
    return FutureBuilder<bool>(
      future: state.hasPendingLocalOps(),
      builder: (context, snap) {
        final pending = snap.data ?? false;
        final hasError = state.lastSyncError != null;
        final hasEverSynced = state.lastSyncTs != null;
        final isHealthy = !pending && hasEverSynced && !hasError;

        // Use light scheme colors for consistent contrast in both modes
        const seed = Color(0xFFD5DEDD);
        final lightScheme = ColorScheme.fromSeed(seedColor: seed, brightness: Brightness.light);
        final Color bg = (state.isSyncing || isHealthy) ? lightScheme.primaryContainer : lightScheme.surfaceContainerHighest;
        final Color fg = (state.isSyncing || isHealthy) ? lightScheme.onPrimaryContainer : lightScheme.onSurfaceVariant;

        return Container(
          decoration: BoxDecoration(
            color: bg,
            borderRadius: BorderRadius.circular(999),
          ),
          padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 4),
          child: Stack(
            alignment: Alignment.center,
            children: [
              Opacity(
                opacity: state.isSyncing ? 0 : 1,
                child: Text(
                  baseText,
                  style: Theme.of(context).textTheme.labelSmall?.copyWith(color: fg, fontWeight: FontWeight.w600),
                ),
              ),
              if (state.isSyncing)
                const SizedBox(
                  width: 12,
                  height: 12,
                  child: CircularProgressIndicator(strokeWidth: 2),
                ),
            ],
          ),
        );
      },
    );
  }

  // promptForText moved to category_actions.dart to avoid duplicates
}



class _StickyHeaderDelegate extends SliverPersistentHeaderDelegate {
  final double height;
  final Widget child;
  _StickyHeaderDelegate({required this.height, required this.child});
  @override
  double get minExtent => height;
  @override
  double get maxExtent => height;
  @override
  Widget build(BuildContext context, double shrinkOffset, bool overlapsContent) => child;
  @override
  bool shouldRebuild(covariant _StickyHeaderDelegate oldDelegate) => oldDelegate.height != height || oldDelegate.child != child;
}


  void _showAddSheet() async {
    showModalBottomSheet<void>(
      context: context,
      showDragHandle: true,
      builder: (ctx) => SafeArea(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            ListTile(
              leading: const Icon(Icons.edit_note_outlined),
              title: const Text('Create manually'),
              onTap: () async {
                Navigator.pop(ctx);
                await context.push(r.AppRoutes.contracts + '/new');
              },
            ),
            ListTile(
              leading: const Icon(Icons.picture_as_pdf_outlined),
              title: const Text('Scan or import PDF'),
              onTap: () {
                Navigator.pop(ctx);
                ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Import from PDF coming soon')));
              },
            ),
            ListTile(
              leading: const Icon(Icons.description_outlined),
              title: const Text('From template'),
              onTap: () {
                Navigator.pop(ctx);
                ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Templates coming soon')));
              },
            ),
          ],
        ),
      ),
    );
  }
